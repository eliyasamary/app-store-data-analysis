# -*- coding: utf-8 -*-
"""analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wOSdYROrCaylU6pZriXF5NsOiNKitw8I

Participants: Asaf Zafrir & Eliya Samary
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler

drive.mount('/content/drive', force_remount=True)
gdrive_path = "/content/drive" + "/My Drive"
# Google_apps_df = pd.read_csv(gdrive_path + "/Google-Playstore.csv")
# Apple_apps_df = pd.read_csv(gdrive_path + "/appleAppData.csv")

# Loading Goggle Dataset
Google_apps_df = pd.read_csv(gdrive_path + "/raw_dataset1.csv")

# Loading Apple Dataset
Apple_apps_df = pd.read_csv(gdrive_path + "/raw_dataset2.csv")

# Google_apps_df = pd.read_csv("Google-Playstore.csv")
# Apple_apps_df = pd.read_csv("appleAppData.csv")

"""# **Introduction:** Datasets Details

We delve into two comprehensive datasets that provide data on **Google and Apple app stores**. These datasets offer information about smartphone applications, encompassing essential metrics such as download counts, user ratings, categories, and more.
"""

data_types = Google_apps_df.dtypes
print(data_types)

data_types = Apple_apps_df.dtypes
print(data_types)

print("\033[1mGoogle App Store Dataset:\033[0m")
print("\033[1mGoogle Info:\033[0m")
print(Google_apps_df.info())
print("\033[1mGoogle Describe:\033[0m")
print(Google_apps_df.describe())
print("-----------------------------------------------------------------\n")
print("\033[1mApple App Store Dataset:\033[0m")
print("\033[1mApple Info:\033[0m")
print(Apple_apps_df.info())
print("\033[1mApple Describe:\033[0m")
print(Apple_apps_df.describe())

print("Number of rows (Google):", len(Google_apps_df))
print("Number of rows (Apple):", len(Apple_apps_df))

"""# **Section 1:** Preprocessing
In this phase, we undertake a series of data preparation steps to ensure that our dataset is ready for analysis

## Standardizing Column Names
To differentiate between features from the Google and Apple datasets after merging, we added a suffix indicating their respective sources: "google" and "apple." This helps distinguish between the two sets of data.
"""

for column in Google_apps_df.columns:
    if column != 'App Id':
      Google_apps_df.rename(columns={column: column + '_google'}, inplace=True)
for column in Apple_apps_df.columns:
    if column != 'App_Id':
      Apple_apps_df.rename(columns={column: column + '_apple'}, inplace=True)

print(Apple_apps_df.info())

print(Google_apps_df.info())

"""
## Data Combination

We opted to merge datasets based on the "App_Id" rather than the "App_Name" to ensure reliability and accuracy of our analysis while minimizing the risk of data mismatching.
"""

Google_apps_df.rename(columns={'App Id': 'App_Id'}, inplace=True)
merged_df = pd.merge(Google_apps_df, Apple_apps_df, on='App_Id', how='inner')

print(merged_df.info())

"""## Handeling null values
Handling Null Values with Precision - handling null values by leveraging the "dropna" function.
"""

df_cleaned = merged_df.dropna()

print(df_cleaned.info())

"""## Reordering Columns

rearranged the columns across both Google and Apple app store datasets. This strategic reordering ensures that columns with identical names, existing in both datasets, are positioned adjacent to each other.
"""

desired_column_order = ['App_Id', 'App Name_google', 'App_Name_apple', 'Free_google',
                        'Free_apple','Price_google','Price_apple', 'Category_google','Primary_Genre_apple',
                        'Released_google', 'Released_apple', 'Last Updated_google','Updated_apple',
                        'Size_google','Size_Bytes_apple','Rating_google', 'Rating Count_google',
                        'Content_Rating_apple', 'Currency_google','Currency_apple', 'Developer Id_google',
                        'DeveloperId_apple', 'Content Rating_google','Installs_google', 'Minimum Installs_google',
                        'Average_User_Rating_apple', 'Reviews_apple', 'Ad Supported_google',  'Minimum Android_google',
                        'Developer Website_google', 'Developer Email_google', 'Privacy Policy_google', 'In App Purchases_google',
                        'Editors Choice_google', 'Scraped Time_google', 'Maximum Installs_google', 'AppStore_Url_apple',
                        'Required_IOS_Version_apple', 'Version_apple', 'Developer_apple', 'Developer_Url_apple',
                        'Developer_Website_apple', 'Current_Version_Score_apple', 'Current_Version_Reviews_apple']
df_cleaned = df_cleaned[desired_column_order]

print(df_cleaned.info())

"""## Remove Unnecessary Features  
streamlined the dataset by removing unnecessary attributes.
"""

columns_to_remove = ['Last Updated_google', 'Updated_apple', 'Currency_google','Currency_apple',
                     'Installs_google', 'Developer Website_google', 'Developer Email_google', 'Privacy Policy_google',
                     'Scraped Time_google', 'AppStore_Url_apple', 'Required_IOS_Version_apple', 'Version_apple',
                     'Developer_apple', 'Developer_Url_apple', 'Developer_Website_apple', 'Current_Version_Score_apple', 'Current_Version_Reviews_apple']
df_cleaned.drop(columns=columns_to_remove, inplace=True)

print(df_cleaned.info())

"""## Converted Data Types

**'Total_rating'**: Created as a new column by adding 'Rating_google' and 'Average_User_Rating_apple', and then converted to numeric.

**'Date_google_agg' and 'Date_apple_agg'**: Converted to quarter-year format ('Q{quarter} {year}') using custom function quarter_of_year.
"""

def convert_to_gigabyte(match):
  value = float(match.group(1)) * 1000000000
  return str(int(value))

def convert_to_megabyte(match):
  value = float(match.group(1)) * 1000000
  return str(int(value))

def convert_to_kilobyte(match):
  value = float(match.group(1)) * 1000
  return str(int(value))

df_cleaned['Price_google'] = pd.to_numeric(df_cleaned['Price_google'])
df_cleaned['Price_apple'] = pd.to_numeric(df_cleaned['Price_apple'])
df_cleaned['Size_google'] = df_cleaned['Size_google'].str.replace(',', '')

df_cleaned['Size_google'] = df_cleaned['Size_google'].str.replace(r'(\d+(\.\d+)?)G', lambda x: convert_to_gigabyte(x), regex=True)
df_cleaned['Size_google'] = df_cleaned['Size_google'].str.replace(r'(\d+(\.\d+)?)M', lambda x: convert_to_megabyte(x), regex=True)
df_cleaned['Size_google'] = df_cleaned['Size_google'].str.replace(r'(\d+(\.\d+)?)k', lambda x: convert_to_kilobyte(x), regex=True)
df_cleaned['Size_google'] = df_cleaned['Size_google'].replace('Varies with device', '0')

df_cleaned['Size_google'] = pd.to_numeric(df_cleaned['Size_google'])
df_cleaned['Size_Bytes_apple'] = pd.to_numeric(df_cleaned['Size_Bytes_apple'])
df_cleaned['Rating_google'] = pd.to_numeric(df_cleaned['Rating_google'])
df_cleaned['Rating Count_google'] = pd.to_numeric(df_cleaned['Rating Count_google'])
df_cleaned['Minimum Installs_google'] = pd.to_numeric(df_cleaned['Minimum Installs_google'])
df_cleaned['Maximum Installs_google'] = pd.to_numeric(df_cleaned['Maximum Installs_google'])
df_cleaned['Average_User_Rating_apple'] = pd.to_numeric(df_cleaned['Average_User_Rating_apple'])
df_cleaned['Reviews_apple'] = pd.to_numeric(df_cleaned['Reviews_apple'])

print(df_cleaned.info())

"""**'Price_google' and 'Price_apple':** Converted to numeric using pd.to_numeric.

**'Size_google':** Converted to numeric after processing size values and removing units ('G', 'M', 'k') using custom conversion functions (convert_to_gigabyte, convert_to_megabyte, convert_to_kilobyte) and replacing 'Varies with device' with '0'.

**'Size_Bytes_apple', 'Rating_google', 'Rating Count_google', 'Minimum Installs_google', 'Maximum Installs_google', 'Average_User_Rating_apple', 'Reviews_apple'**: Converted to numeric using pd.to_numeric.
"""

df_cleaned['Total_rating'] = df_cleaned['Rating_google'] + df_cleaned['Average_User_Rating_apple']
df_cleaned['Total_rating'] = pd.to_numeric(df_cleaned['Total_rating'])

print(df_cleaned.info())

"""calculates the total rating by adding the **'Rating_google' and 'Average_User_Rating_apple'** columns together and assigns the result to a new column **'Total_rating'** .

converts **the 'Total_rating'** column to **numeric data typ**e using pd.to_numeric.

ensures that the total rating column is represented as **numerical values**
"""

from datetime import datetime

def parse_date(date_string):
    try:
        date = pd.to_datetime(date_string, format="%b %d, %Y")
    except ValueError:
        try:
            date = pd.to_datetime(date_string)
        except ValueError:
            return pd.NaT

    return date

def quarter_of_year(date):
  quarter = (date.month - 1) // 3 + 1
  return quarter

def num_of_year(date):
  return date.year

df_cleaned['Date_google_agg'] = df_cleaned['Released_google'].apply(parse_date)
df_cleaned['Date_apple_agg'] = df_cleaned['Released_apple'].apply(parse_date)

df_cleaned['Year_apple'] = df_cleaned['Date_apple_agg'].apply(num_of_year)
df_cleaned['Year_google'] = df_cleaned['Date_google_agg'].apply(num_of_year)

def quarter_of_year(date):
  quarter = (date.month - 1) // 3 + 1
  return quarter

def num_of_year(date):
  return date.year

df_cleaned['Date_google_agg'] = df_cleaned['Date_google_agg'].apply(quarter_of_year)
df_cleaned['Date_apple_agg'] = df_cleaned['Date_apple_agg'].apply(quarter_of_year)

df_cleaned['Year_apple'] = pd.to_numeric(df_cleaned['Year_apple'])
df_cleaned['Year_google'] = pd.to_numeric(df_cleaned['Year_google'])

print(df_cleaned.info())

"""**'Released_google':** Converted to datetime objects and assigned to the new column **'Date_google_agg'.**
**'Released_apple':** Converted to datetime objects and assigned to the new column **'Date_apple_agg'.**

## Handling Missing Values
"""

df_cleaned.dropna(inplace=True)

print(df_cleaned.info())

"""## Declare categorial features"""

df_cleaned['Category_google'] = df_cleaned['Category_google'].astype("category")
df_cleaned['Primary_Genre_apple'] = df_cleaned['Primary_Genre_apple'].astype("category")

"""## Removing Duplicates"""

df_cleaned.drop_duplicates(inplace=True)

print(df_cleaned.info())

"""## Handling Outliers"""

Q1 = df_cleaned['Rating_google'].quantile(0.25)
Q3 = df_cleaned['Rating_google'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
df_cleaned['Rating_google'] = df_cleaned['Rating_google'].clip(lower=lower_bound, upper=upper_bound)

print(df_cleaned.info())

"""## Scaling Numerical Features"""

scaler = MinMaxScaler()
df_cleaned['Size_google_scaled'] = scaler.fit_transform(df_cleaned[['Size_google']])

print(df_cleaned.info())

"""## Remove Unnecessary Features (after merge)"""

columns_to_remove = ['Size_google', 'Rating Count_google', 'Content_Rating_apple', 'Content Rating_google','Reviews_apple','Minimum Android_google']
df_cleaned.drop(columns=columns_to_remove, inplace=True)

print(df_cleaned.info())

"""## Load the new Dataset as "ready_dataset"

modified DataFrame:
"""

print(df_cleaned.info())

df_cleaned.to_csv("ready_dataset.csv", index=False)
df_ready = pd.read_csv("ready_dataset.csv")

"""# **Section 2:** Data Analysis

## Features Distribution

### Distrbution of Prices
"""

plt.figure(figsize=(8, 6))
sns.boxplot(data=df_ready, x='Price_google', color='skyblue')
plt.xlabel('Price (USD)')
plt.title('Price Distribution on Google Play')
plt.grid(True)
plt.show()

plt.figure(figsize=(8, 6))
sns.boxplot(data=df_ready, x='Price_apple', color='lightgreen')
plt.xlabel('Price (USD)')
plt.title("Price Distribution on Apple's App Store")
plt.grid(True)
plt.show()

plt.hist(df_ready['Price_google'], bins=20, range=(0, 250), alpha=0.5, label='Price Google', color='blue')

# Plot histogram for 'Price_apple'
plt.hist(df_ready['Price_apple'], bins=20, range=(0, 250), alpha=0.5, label='Price Apple', color='orange')

plt.xlabel('Price')
plt.ylabel('Frequency')
plt.title('Distribution of Prices (Including 0)')
plt.legend()
plt.grid(axis='y')  # Show grid lines only on the y-axis
plt.show()

price_google_filtered = df_ready[df_ready['Price_google'] != 0]['Price_google']
price_apple_filtered = df_ready[df_ready['Price_apple'] != 0]['Price_apple']

plt.hist(price_google_filtered, bins=20, range=(0, 250), alpha=0.5, label='Price Google', color='blue')

plt.hist(price_apple_filtered, bins=20, range=(0, 250), alpha=0.5, label='Price Apple', color='orange')

plt.xlabel('Price')
plt.ylabel('Frequency')
plt.title('Distribution of Prices (Excluding 0)')
plt.legend()
plt.grid(axis='y')
plt.show()

price_google_filtered = df_ready[df_ready['Price_google'] != 0]['Price_google']
price_apple_filtered = df_ready[df_ready['Price_apple'] != 0]['Price_apple']

plt.hist(price_google_filtered, bins=20, range=(50, 250), alpha=0.5, label='Price Google', color='blue')

plt.hist(price_apple_filtered, bins=20, range=(50, 250), alpha=0.5, label='Price Apple', color='orange')

plt.xlabel('Price')
plt.ylabel('Frequency')
plt.title('Distribution of Prices (range 50-250)')
plt.legend()
plt.grid(axis='y')
plt.show()

non_zero_prices_google = df_ready[df_ready['Price_google'] != 0]['Price_google']
non_zero_prices_apple = df_ready[df_ready['Price_apple'] != 0]['Price_apple']

max_price_google = non_zero_prices_google.max()
min_price_google = non_zero_prices_google.min()

max_price_apple = non_zero_prices_apple.max()
min_price_apple = non_zero_prices_apple.min()

print("Google Play Store:")
print("Highest non-zero price:", max_price_google)
print("Lowest non-zero price:", min_price_google)

print("\nApple App Store:")
print("Highest non-zero price:", max_price_apple)
print("Lowest non-zero price:", min_price_apple)

num_zero_prices_google = (df_ready['Price_google'] == 0).sum()
num_non_zero_prices_google = (df_ready['Price_google'] != 0).sum()

num_zero_prices_apple = (df_ready['Price_apple'] == 0).sum()
num_non_zero_prices_apple = (df_ready['Price_apple'] != 0).sum()

print("Google Play Store:")
print("Number of zero-priced apps:", num_zero_prices_google)
print("Number of non-zero-priced apps:", num_non_zero_prices_google)

print("\nApple App Store:")
print("Number of zero-priced apps:", num_zero_prices_apple)
print("Number of non-zero-priced apps:", num_non_zero_prices_apple)


print("\nTotal Number of zero-priced apps:", num_zero_prices_apple+num_zero_prices_google)
print("Total Number of non-zero-priced apps:", num_non_zero_prices_apple+num_non_zero_prices_google)

"""Total Number of Free Apps"""

total_free_apps_google = df_ready['Free_google'].sum()
total_free_apps_apple = df_ready['Free_apple'].sum()
print("\nTotal Number of Free Apps on Google Play:", total_free_apps_google)
print("Total Number of Free Apps on Apple App Store:", total_free_apps_apple)

"""Checking consistency between "Price" and "Free"

*where Price is 0.0 Free should be true*
"""

free_true_nonzero_price = df_ready[(df_ready['Free_google']) & (df_ready['Price_google'] != 0.0)]

free_false_zero_price = df_ready[(~df_ready['Free_google']) & (df_ready['Price_google'] == 0.0)]

if free_true_nonzero_price.empty and free_false_zero_price.empty:
    print("There are no inconsistencies between 'Free' and 'Price' columns.")
else:
    print("Inconsistencies found:")
    if not free_true_nonzero_price.empty:
        print("\nFor 'Free' as True and 'Price' not equal to 0.0:")
        print(free_true_nonzero_price)
    if not free_false_zero_price.empty:
        print("\nFor 'Free' as False and 'Price' equal to 0.0:")
        print(free_false_zero_price)

plt.bar(['True and Nonzero Price', 'False and Zero Price'], [len(free_true_nonzero_price), len(free_false_zero_price)], color=['blue', 'orange'])
plt.xlabel('Cases')
plt.ylabel('Number of Apps')
plt.title('Inconsistencies between "Free" and "Price" Columns')
plt.show()

"""Market Share Analysis"""

market_share_google = total_free_apps_google / len(df_ready) * 100
market_share_apple = total_free_apps_apple / len(df_ready) * 100
print("\nMarket Share of Free Apps on Google Play: {:.2f}%".format(market_share_google))
print("Market Share of Free Apps on Apple App Store: {:.2f}%".format(market_share_apple))

"""### Distrbution of Rating"""

fig, ax = plt.subplots()

plt.hist(df_ready['Rating_google'], bins=20, range=(0, 5), alpha=0.5, label='Google Play Store', color='blue')

plt.hist(df_ready['Average_User_Rating_apple'], bins=20, range=(0, 5), alpha=0.5, label='Apple App Store', color='orange')

plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.title('Rating Distribution Comparison: Google Play Store vs. Apple App Store')
plt.legend()
plt.grid(axis='y')
plt.show()

max_rating_google = df_ready['Rating_google'].max()
max_rating_app_google = df_ready.loc[df_ready['Rating_google'] == max_rating_google, 'App Name_google'].iloc[0]

max_rating_apple = df_ready['Average_User_Rating_apple'].max()
max_rating_app_apple = df_ready.loc[df_ready['Average_User_Rating_apple'] == max_rating_apple, 'App_Name_apple'].iloc[0]

print("App with the highest rating on Google Play Store:", max_rating_app_google)
print("Highest rating on Google Play Store:", max_rating_google)
print()
print("App with the highest rating on Apple App Store:", max_rating_app_apple)
print("Highest rating on Apple App Store:", max_rating_apple)

"""The most rated categories on google play"""

count_rating_by_category = df_ready.groupby('Category_google')['Rating_google'].count()
count_rating_by_category_sorted = count_rating_by_category.sort_values(ascending=False)
first_line = count_rating_by_category_sorted.index[0]
formatted_output = count_rating_by_category_sorted.to_string(header=False).replace(first_line, f"\033[1m{first_line}\033[0m", 1)
print(formatted_output)

"""The most rated categories on apple store"""

count_rating_by_genre = df_ready.groupby('Primary_Genre_apple')['Average_User_Rating_apple'].count()
count_rating_by_genre_sorted = count_rating_by_genre.sort_values(ascending=False)
first_line = count_rating_by_genre_sorted.index[0]
formatted_output = count_rating_by_genre_sorted.to_string(header=False).replace(first_line, f"\033[1m{first_line}\033[0m", 1)
print(formatted_output)

"""### Distribution of Free vs. Paid Apps"""

free_count = df_ready['Free_google'].value_counts()
paid_count = df_ready['Free_apple'].value_counts()

fig, ax = plt.subplots(figsize=(8, 6))

ax.bar(['Google Play (Free)', 'Apple App Store (Free)'], free_count.values, color='skyblue', label='Free')

ax.bar(['Google Play (Paid)', 'Apple App Store (Paid)'], paid_count.values, color='orange', label='Paid')

ax.set_xlabel('Platform and Free/Paid Status')
ax.set_ylabel('Number of Apps')
ax.set_title('Distribution of Free vs. Paid Apps')
ax.legend()

plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

free_apps_count = df_ready[df_ready['Free_google']].shape[0]
not_free_apps_count = df_ready[~df_ready['Free_google']].shape[0]

labels = ['Free', 'Not Free']
counts = [free_apps_count, not_free_apps_count]

plt.figure(figsize=(8, 6))
plt.pie(counts, labels=labels, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Free vs. Not Free Apps')
plt.axis('equal')
plt.show()

"""### Average Ratings Comparison"""

average_rating_google = df_ready['Rating_google'].mean()
average_rating_apple = df_ready['Average_User_Rating_apple'].mean()
print("Average app rating on Google Play:", average_rating_google)
print("Average app rating on Apple's App Store:", average_rating_apple)

avg_ratings_google = df_ready.groupby('Free_google')['Rating_google'].mean()
print("Average Ratings for Google Play Apps:")
for is_free, avg_rating in avg_ratings_google.items():
    print(f"- {is_free}: {avg_rating}")

avg_ratings_apple = df_ready.groupby('Free_apple')['Average_User_Rating_apple'].mean()
print("\nAverage Ratings for Apple App Store Apps:")
for is_free, avg_rating in avg_ratings_apple.items():
    print(f"- {is_free}: {avg_rating}")

avg_ratings_google = df_ready.groupby('Free_google')['Rating_google'].mean()
plt.bar(['False', 'True'], avg_ratings_google.values, color='blue')
plt.title('Average Ratings for Google Play Apps')
plt.xlabel('Free')
plt.ylabel('Average Rating')
plt.show()

avg_ratings_apple = df_ready.groupby('Free_apple')['Average_User_Rating_apple'].mean()
plt.bar(['False', 'True'], avg_ratings_apple.values, color='orange')
plt.title('Average Ratings for Apple App Store Apps')
plt.xlabel('Free')
plt.ylabel('Average Rating')
plt.show()

combined_ratings = df_ready[['Rating_google', 'Average_User_Rating_apple']].stack().mean()
print("Overall Average Rating for Google Play and Apple App Store Apps Together:", combined_ratings)

avg_ratings_google = df_ready.groupby('Free_google')['Rating_google'].mean()

avg_ratings_apple = df_ready.groupby('Free_apple')['Average_User_Rating_apple'].mean()

fig, ax = plt.subplots(figsize=(10, 6))

ax.bar(avg_ratings_google.index.astype(str), avg_ratings_google.values, color='skyblue', label='Google Play', alpha=0.7)

ax.bar(avg_ratings_apple.index.astype(str), avg_ratings_apple.values, color='orange', label='Apple App Store', alpha=0.7)

ax.set_xlabel('Free')
ax.set_ylabel('Average Rating')
ax.set_title('Average Ratings by Platform and Free Status')
ax.legend()

plt.show()

"""### App Size Distribution"""

plt.figure(figsize=(10, 6))
plt.hist(df_ready['Size_google_scaled'], bins=20, color='skyblue', edgecolor='black')
plt.xlabel('App Size (Bytes)')
plt.ylabel('Frequency')
plt.title('App Size Distribution on Google Play')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(df_ready['Size_google_scaled'], bins=20, range=(0.2, 1.1), color='skyblue', edgecolor='black')
plt.xlabel('App Size (Bytes)')
plt.ylabel('Frequency')
plt.title('App Size Distribution on Google Play')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(df_ready['Size_Bytes_apple'], bins=20, color='lightgreen', edgecolor='black')
plt.xlabel('App Size (Bytes)')
plt.ylabel('Frequency')
plt.title("App Size Distribution on Apple's App Store")
plt.grid(True)
plt.show()

"""Max/Min size apps"""

max_size_apple_index = df_ready['Size_Bytes_apple'].idxmax()
max_size_apple_app = df_ready.loc[max_size_apple_index, 'App_Name_apple']
max_size_apple_size = df_ready.loc[max_size_apple_index, 'Size_Bytes_apple']

min_size_apple_index = df_ready['Size_Bytes_apple'].idxmin()
min_size_apple_app = df_ready.loc[min_size_apple_index, 'App_Name_apple']
min_size_apple_size = df_ready.loc[min_size_apple_index, 'Size_Bytes_apple']

max_size_google_index = df_ready['Size_google_scaled'].idxmax()
max_size_google_app = df_ready.loc[max_size_google_index, 'App Name_google']
max_size_google_size = df_ready.loc[max_size_google_index, 'Size_google_scaled']

min_size_google_index = df_ready['Size_google_scaled'].idxmin()
min_size_google_app = df_ready.loc[min_size_google_index, 'App Name_google']
min_size_google_size = df_ready.loc[min_size_google_index, 'Size_google_scaled']

print("App with Maximum Size in Apple Dataset:", max_size_apple_app, "- Size:", max_size_apple_size)
print("App with Minimum Size in Apple Dataset:", min_size_apple_app, "- Size:", min_size_apple_size)
print("App with Maximum Size in Google Dataset:", max_size_google_app, "- Size:", max_size_google_size)
print("App with Minimum Size in Google Dataset:", min_size_google_app, "- Size:", min_size_google_size)

if min_size_apple_size < min_size_google_size:
    min_size_app = min_size_apple_app
    min_size = min_size_apple_size
    dataset = "Apple"
else:
    min_size_app = min_size_google_app
    min_size = min_size_google_size
    dataset = "Google"

if max_size_apple_size > max_size_google_size:
    max_size_app = max_size_apple_app
    max_size = max_size_apple_size
    dataset = "Apple"
else:
    max_size_app = max_size_google_app
    max_size = max_size_google_size
    dataset = "Google"

print("App with the Most Minimum Size:", min_size_app, "- Size:", min_size, "- Dataset:", dataset)
print("App with the Most Maximum Size:", max_size_app, "- Size:", max_size, "- Dataset:", dataset)

"""Average apps size on Google and Apple:"""

average_app_size_google = df_ready['Size_google_scaled'].mean()
average_app_size_apple = df_ready['Size_Bytes_apple'].mean()
print("Average app size on Google Play:", average_app_size_google)
print("Average app size on Apple's App Store:", average_app_size_apple)

"""### 10 Top developers"""

top_developers_google = df_ready['Developer Id_google'].value_counts().head(10)
top_developers_apple = df_ready['DeveloperId_apple'].value_counts().head(10)
print("Top developers on Google Play:")
print(top_developers_google)
print("\nTop developers on Apple's App Store:")
print(top_developers_apple)

plt.figure(figsize=(10, 6))
top_developers_google.plot(kind='bar', color='skyblue')
plt.title('Top Developers on Google Play')
plt.xlabel('Developer ID')
plt.ylabel('Number of Apps')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.show()

plt.figure(figsize=(10, 6))
top_developers_apple.plot(kind='bar', color='lightgreen')
plt.title("Top Developers on Apple's App Store")
plt.xlabel('Developer ID')
plt.ylabel('Number of Apps')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.show()

"""### Number of App Releases by Year"""

df_ready['Released_google'] = pd.to_datetime(df_ready['Released_google'])
df_ready['Released_apple'] = pd.to_datetime(df_ready['Released_apple'])

df_ready['Released_google_year'] = df_ready['Released_google'].dt.year
df_ready['Released_apple_year'] = df_ready['Released_apple'].dt.year

plt.figure(figsize=(10, 6))
df_ready['Released_google_year'].value_counts().sort_index().plot(kind='bar', color='skyblue', alpha=0.7, label='Google Play')
df_ready['Released_apple_year'].value_counts().sort_index().plot(kind='bar', color='orange', alpha=0.7, label="Apple's App Store")
plt.title('Number of App Releases by Year')
plt.xlabel('Year')
plt.ylabel('Number of Releases')
plt.legend()
plt.show()

"""### Category-wise App Count
 how the distribution of apps across different categories on both Google Play and Apple's App Store
"""

plt.figure(figsize=(10, 6))
sns.countplot(data=df_ready, x='Category_google')
plt.xlabel('Category (Google Play)')
plt.ylabel('Number of Apps')
plt.title('Category-wise App Count on Google Play')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(data=df_ready, x='Primary_Genre_apple')
plt.xlabel('Category (Apple App Store)')
plt.ylabel('Number of Apps')
plt.title("Category-wise App Count on Apple's App Store")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

top_categories_google = df_ready['Category_google'].value_counts().head(3)
top_categories_apple = df_ready['Primary_Genre_apple'].value_counts().head(3)
print("Top categories on Google Play:")
print(top_categories_google)
print("\nTop categories on Apple's App Store:")
print(top_categories_apple)

"""### App Names

Find Names That Are Not the Same in Both Columns:
"""

df_ready['Names_Not_Same'] = (df_ready['App Name_google'] != df_ready['App_Name_apple']).astype(int)
num_names_not_same = df_ready['Names_Not_Same'].sum()
print(f"Number of names not the same in both columns: {num_names_not_same}")

"""Add an Average App Name Length Column:"""

df_ready['Av_App_name_length'] = (df_ready['App Name_google'].str.len() + df_ready['App_Name_apple'].str.len()) / 2

plt.figure(figsize=(10, 6))
plt.hist(df_ready['Av_App_name_length'], bins=20, color='skyblue', edgecolor='black')
plt.xlabel('Average App Name Length')
plt.ylabel('Frequency')
plt.title('Distribution of Average App Name Length')
plt.grid(True)
plt.show()

longest_name_google = df_ready.loc[df_ready['App_Name_apple'].str.len().idxmax(), 'App_Name_apple']
longest_name_length_google = len(longest_name_google)

shortest_name_google = df_ready.loc[df_ready['App_Name_apple'].str.len().idxmin(), 'App_Name_apple']
shortest_name_length_google = len(shortest_name_google)

longest_name_apple = df_ready.loc[df_ready['App_Name_apple'].str.len().idxmax(), 'App_Name_apple']
longest_name_length_apple = len(longest_name_apple)

shortest_name_apple = df_ready.loc[df_ready['App_Name_apple'].str.len().idxmin(), 'App_Name_apple']
shortest_name_length_apple = len(shortest_name_apple)

print("Longest App Name in Google Play:", longest_name_google)
print("Length:", longest_name_length_google)
print("\nShortest App Name in Google Play:", shortest_name_google)
print("Length:", shortest_name_length_google)
print("\nLongest App Name in Apple's App Store:", longest_name_apple)
print("Length:", longest_name_length_apple)
print("\nShortest App Name in Apple's App Store:", shortest_name_apple)
print("Length:", shortest_name_length_apple)

"""## Correlations beteen features"""

numeric_df = df_ready.select_dtypes(include=['float64', 'int64', 'int32'])

plt.figure(figsize=(16, 8))
sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Google & Apple Apps Store Correlation Matrix:')
plt.show()

"""## Most influential features"""

filtered_df = df_ready[df_ready['Total_rating'] > 9]

numeric_filtered_df = filtered_df.select_dtypes(include=['float64', 'int64', 'int32'])

plt.figure(figsize=(16, 8))
sns.heatmap(numeric_filtered_df.corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Heatmap of total rating above 9/10:')
plt.show()

top_n = 10

value_counts = filtered_df['Category_google'].value_counts()

value_counts_top_n = value_counts.head(top_n)

value_counts_top_n.plot(kind='bar')
plt.xlabel('Category')
plt.ylabel('Frequency')
plt.title('Frequency of Each Category - Google')
plt.show()

value_counts = filtered_df['Primary_Genre_apple'].value_counts()

value_counts_top_n = value_counts.head(top_n)

value_counts_top_n.plot(kind='bar')
plt.xlabel('Category')
plt.ylabel('Frequency')
plt.title('Frequency of Each Category - Apple')
plt.show()

value_counts = filtered_df['Date_apple_agg'].value_counts().sort_index()

value_counts.plot(kind='bar')
plt.xlabel('Quarter of the year')
plt.ylabel('Frequency')
plt.title('Frequency of Each Quarter of the year - Apple')
plt.show()

value_counts = filtered_df['Date_google_agg'].value_counts().sort_index()

value_counts.plot(kind='bar')
plt.xlabel('Quarter of the year')
plt.ylabel('Frequency')
plt.title('Frequency of Each Quarter of the year - Google')
plt.show()